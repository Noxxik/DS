/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import app.entities.Jobs;
import app.entities.Users;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.criteria.CriteriaQuery;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author JB
 */
public class JobsSelector extends javax.swing.JPanel {
    private EntityManagerFactory factory;
    private List<Jobs> notSelectedJobs, selectedJobs;
    private DefaultListModel listModel;
    
    
    /**
     * Creates new form JobsSelector
     */
    public JobsSelector() {
        initComponents();
    }
    
    
    /**
     * Need this because constructor can't have any arguments.
     * @param factory
     * @param user null if should be blank, otherwise supply user to fill his data
     */
    public void initialize(EntityManagerFactory factory, Users user) {
        this.factory = factory;
        reset();
        if (user != null) {
            for (Jobs job : user.getJobsCollection()) {
                moveToSelected(notSelectedJobs.indexOf(job));
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        selectedList = new javax.swing.JList();
        notSelected = new javax.swing.JComboBox();
        addJob = new javax.swing.JButton();
        removeJob = new javax.swing.JButton();
        nameText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        descriptionText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        createJob = new javax.swing.JButton();

        jScrollPane2.setPreferredSize(new java.awt.Dimension(258, 98));

        selectedList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        selectedList.setVisibleRowCount(6);
        jScrollPane2.setViewportView(selectedList);

        addJob.setText("Add job");
        addJob.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addJobMouseClicked(evt);
            }
        });

        removeJob.setText("Remove highlighted");
        removeJob.setPreferredSize(new java.awt.Dimension(100, 200));
        removeJob.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeJobMouseClicked(evt);
            }
        });

        jLabel1.setText("New job name:");

        jLabel2.setText("Description:");

        createJob.setText("Create new job");
        createJob.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createJobMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(notSelected, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addJob)
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameText)
                    .addComponent(removeJob, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addComponent(descriptionText)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(createJob))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeJob, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addJob, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(descriptionText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createJob))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addJobMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addJobMouseClicked
        moveToSelected(notSelected.getSelectedIndex());
    }//GEN-LAST:event_addJobMouseClicked

    private void removeJobMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeJobMouseClicked
        int index = selectedList.getSelectedIndex();
        if (index == -1) { return;}
        Jobs j = selectedJobs.get(index);
        selectedJobs.remove(index);
        listModel.removeElementAt(index);
        if (j.getJobId() == null) {
            //Job not in database yet
            return;
        }
        notSelectedJobs.add(j);
        notSelected.addItem(j.getName());
    }//GEN-LAST:event_removeJobMouseClicked

    private void createJobMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createJobMouseClicked
        String name = nameText.getText();
        String description = descriptionText.getText();
        if (nameText.getText().isEmpty()) { 
            JOptionPane.showMessageDialog(null, 
                    "Job name cannot be empty!",
                    "Job could not be created",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (jobExists(name)) {
            JOptionPane.showMessageDialog(null, 
                    "Job already exists. Try to find it in the combo box or the list.",
                    "Job could not be created",
                    JOptionPane.ERROR_MESSAGE);
            return; 
        }
        Jobs job = new Jobs();
        job.setName(name);
        job.setDescription(description);
        job.setUsersCollection(new ArrayList<Users>());
        selectedJobs.add(job);
        listModel.addElement("<html><b>" + job.getName() + "</b><br> " + job.getDescription() + "</html>");
        nameText.setText("");
        descriptionText.setText("");
    }//GEN-LAST:event_createJobMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJob;
    private javax.swing.JButton createJob;
    private javax.swing.JTextField descriptionText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameText;
    private javax.swing.JComboBox notSelected;
    private javax.swing.JButton removeJob;
    private javax.swing.JList selectedList;
    // End of variables declaration//GEN-END:variables
    
    
    private List<Jobs> getJobsList() {
        EntityManager em = factory.createEntityManager();
        CriteriaQuery<Jobs> cq = em.getCriteriaBuilder().createQuery(Jobs.class);
        cq.select(cq.from(Jobs.class));
        return em.createQuery(cq).getResultList();
    }
    
    private boolean jobExists(String name) {
        for (Jobs j : notSelectedJobs) {
            if (j.getName().equals(name)) {
                return true;
            }
        }
        for (Jobs j : selectedJobs) {
            if (j.getName().equals(name)) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * @return The list of selected jobs. This is the main result of this component 
     */
    public List<Jobs> getSelectedJobs() {
        return selectedJobs;
    }
    
    /**
     * Resets to the original state.
     */
    public void reset() {
        notSelectedJobs = getJobsList();
        selectedJobs = new ArrayList<>();
        notSelected.removeAllItems();
        for (Jobs j : notSelectedJobs) {
            notSelected.addItem(j.getName());
        }
        selectedList.setModel(listModel = new DefaultListModel());  
    }
    
    private void moveToSelected(int id) {
        String item = (String) notSelected.getItemAt(id);
        if (item == null) { return;}
        Jobs j = notSelectedJobs.get(id);
        notSelectedJobs.remove(id);
        selectedJobs.add(j);
        listModel.addElement("<html><b>" + j.getName() + "</b><br> " + j.getDescription() + "</html>");
        notSelected.removeItem(item);
    }
    
}
